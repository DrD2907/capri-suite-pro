
const { sbGet, sbPost } = require('./db');
const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));
function fmtHuman(d,t){ const [y,m,dd]=d.split('-'); return `${dd}/${m}/${y} ${t}` }
async function sendWhatsApp(text){ const token=process.env.WHATSAPP_TOKEN, phoneId=process.env.WHATSAPP_PHONE_ID, admin=process.env.ADMIN_WHATSAPP; if(!token||!phoneId||!admin) return {skipped:true}; const url=`https://graph.facebook.com/v20.0/${phoneId}/messages`; const body={ messaging_product:'whatsapp', to:admin, type:'text', text:{body:text} }; const r=await fetch(url,{method:'POST', headers:{'Authorization':`Bearer ${token}`,'Content-Type':'application/json'}, body: JSON.stringify(body)}); if(!r.ok) return {ok:false, error: await r.text()}; return {ok:true}; }
async function sendEmail(text){ if(process.env.RESEND_API_KEY&&process.env.RESEND_TO&&process.env.RESEND_FROM){ const r=await fetch('https://api.resend.com/emails',{method:'POST', headers:{'Authorization':`Bearer ${process.env.RESEND_API_KEY}`,'Content-Type':'application/json'}, body: JSON.stringify({ from:process.env.RESEND_FROM, to:[process.env.RESEND_TO], subject:'Nueva reserva desde la web', text })}); if(!r.ok) return {ok:false, error: await r.text()}; return {ok:true}; }
  if(process.env.FORMSPREE_ENDPOINT){ const r=await fetch(process.env.FORMSPREE_ENDPOINT,{method:'POST', headers:{'Accept':'application/json','Content-Type':'application/json'}, body: JSON.stringify({_subject:'Nueva reserva', _message:text})}); if(!r.ok) return {ok:false, error: await r.text()}; return {ok:true}; }
  return {skipped:true}; }
exports.handler = async (event) => { if(event.httpMethod!=='POST') return {statusCode:405, body: JSON.stringify({error:'Method not allowed'})}; try{ const { nombre, telefono, service_id, fecha, hora, comentarios='', notificarPor, website } = JSON.parse(event.body||'{}'); if(website) return {statusCode:200, body: JSON.stringify({ok:true, bot:true})}; if(!nombre||!telefono||!service_id||!fecha||!hora) return {statusCode:400, body: JSON.stringify({error:'Campos incompletos'})}; const svc=(await sbGet('/services',{ select:'*', id:`eq.${service_id}`, limit:'1'}))[0]; if(!svc) return {statusCode:400, body: JSON.stringify({error:'Servicio no encontrado'})}; const start=new Date(`${fecha}T${hora}:00`); const end=new Date(start.getTime()+svc.duration_minutes*60000); const end_time=`${String(end.getHours()).padStart(2,'0')}:${String(end.getMinutes()).padStart(2,'0')}`; const overlaps=await sbGet('/appointments',{ select:'id', date:`eq.${fecha}`, 'start_time':`lt.${end_time}`, 'end_time':`gt.${hora}`, 'status':`neq.cancelled` }); if(overlaps.length) return {statusCode:409, body: JSON.stringify({error:'Horario ocupado'})}; const ins=await sbPost('/appointments',[{ customer_name:nombre, phone:telefono, service_id, service_name: svc.name, date:fecha, start_time:hora, end_time, comments:comentarios, status:'pending' }]); const resumen=`Nueva reserva:
- Nombre: ${nombre}
- Teléfono: ${telefono}
- Servicio: ${svc.name}
- Fecha/Hora: ${fmtHuman(fecha,hora)}
- Comentarios: ${comentarios||'—'}`; if(notificarPor==='whatsapp') await sendWhatsApp(resumen); if(notificarPor==='email') await sendEmail(resumen); return {statusCode:201, body: JSON.stringify({ok:true, id: ins[0].id})}; }catch(err){ return {statusCode:500, body: JSON.stringify({error: err.message})} }
};
